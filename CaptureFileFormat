FILE_HEADER:
	0xEC83B0B0
	int kinectType;
	int kinectDepthWidth;
	int kinectDepthHeight;
	int maxSkeletonAmount;

	int dataCompressorType;

FILE_DATA:
	0xEC83B2B2
	int frameSize;
	DEPTHKEYFRAME depthKeyFrame;
	for (int i = 0; i < depthframeAmount; i++) {
		int frameSize;
		DEPTHCOMPRESSEDFRAME depthFrames;
	}
	0xEC83B1B1
	0xEC83B3B3
	for (int i = 0; i < skeletonframeAmount; i++) {
		int frameSize;
		SKELETONFRAME skeletonFrames;
	}
	0xEC83B1B1

	... repeat until file end
	
---------------------------------------------------------
DEPTHKEYFRAME_HEADER:
	long timestamp;
	int depthFrameLength;
	int playerIndexLength;
	int xyzLength;
	int uvLength;

DEPTHKEYFRAME_DATA:
	short[] depthFrame;
	byte[] playerIndex;
	float[] xyz;
	float[] uv;

---------------------------------------------------------
DEPTHCOMPRESSEDFRAME_HEADER:
	long timestamp;
	int depthFrameDiffLength;
	int playerIndexDiffLength;
	int xyzDiffLength;
	int uvDiffLength;

DEPTHCOMPRESSEDFRAME_DATA:
	int[] depthFrameDiffIndices;
	short[] depthFrameDiffData;
	int[] playerIndexDiffIndices;
	byte[] playerIndexDiffData;
	int[] xyzDiffIndices;
	float[] xyzDiffData;
	int[] uvDiffIndices;
	float[] uvDiffData;

---------------------------------------------------------
SKELETONFRAME_HEADER:
	long timestamp;
	int flagsLength;
	int positionsLength;
	int orientationsLength;
	int stateLength;

SKELETONFRAME_DATA:
	boolean[] flags;
	float[] positions;
	float[] orientations;
	byte[] state;